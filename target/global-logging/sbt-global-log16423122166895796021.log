[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\a.szczepanik\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\a.szczepanik\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.6.2 (Eclipse Adoptium Java 11.0.14.1)
[debug]       Load.loadUnit: plugins took 207.8393ms
[debug]       Load.loadUnit: defsScala took 0.7428ms
[debug] [Loading] Scanning directory C:\Users\a.szczepanik\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\a.szczepanik\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 39.3214 ms
[debug]           Load.resolveProject(global-plugins) took 99.1572ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\a.szczepanik\.sbt\1.0\plugins, plugins: List(<none>))) took 201.0718ms
[debug] [Loading] Done in C:\Users\a.szczepanik\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 264.2482ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.3691ms
[debug]     Load.loadUnit(file:/C:/Users/a.szczepanik/.sbt/1.0/plugins/, ...) took 495.3211ms
[debug]   Load.apply: load took 811.9722ms
[debug]   Load.apply: resolveProjects took 10.8283ms
[debug]   Load.apply: finalTransforms took 131.5647ms
[debug]   Load.apply: config.delegates took 17.9304ms
[debug]   Load.apply: Def.make(settings)... took 952.9505ms
[debug]   Load.apply: structureIndex took 223.5501ms
[debug]   Load.apply: mkStreams took 4.1947ms
[info] loading global plugins from C:\Users\a.szczepanik\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 5468.6985ms
[debug]           Load.loadUnit: plugins took 101.683ms
[debug]           Load.loadUnit: defsScala took 0.0117ms
[debug] [Loading] Scanning directory C:\Users\a.szczepanik\Projekty\s99\project
[debug]             Load.loadUnit: mkEval took 14.401ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\a.szczepanik\Projekty\s99\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 7.3564 ms
[info] loading settings for project s99-build from idea.sbt ...
[debug]               Load.resolveProject(s99-build) took 5.9638ms
[debug]             Load.loadTransitive: finalizeProject(Project(id s99-build, base: C:\Users\a.szczepanik\Projekty\s99\project, plugins: List(<none>))) took 14.7605ms
[debug] [Loading] Done in C:\Users\a.szczepanik\Projekty\s99\project, returning: (s99-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 7198.117ms
[debug]           Load.loadUnit: cleanEvalClasses took 11.9365ms
[debug]         Load.loadUnit(file:/C:/Users/a.szczepanik/Projekty/s99/project/, ...) took 7314.8653ms
[debug]       Load.apply: load took 7318.6128ms
[debug]       Load.apply: resolveProjects took 0.2385ms
[debug]       Load.apply: finalTransforms took 23.4091ms
[debug]       Load.apply: config.delegates took 1.0311ms
[debug]       Load.apply: Def.make(settings)... took 158.6591ms
[debug]       Load.apply: structureIndex took 49.5681ms
[debug]       Load.apply: mkStreams took 0.0032ms
[info] loading project definition from C:\Users\a.szczepanik\Projekty\s99\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 17649.5967ms
[debug]     Load.loadUnit: defsScala took 0.0081ms
[debug] [Loading] Scanning directory C:\Users\a.szczepanik\Projekty\s99
[debug]       Load.loadUnit: mkEval took 1.0981ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 6.1999 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 69.6712ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\a.szczepanik\Projekty\s99, plugins: List(<none>))) took 80.5901ms
[debug] [Loading] Done in C:\Users\a.szczepanik\Projekty\s99, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 4080.8267ms
[debug]     Load.loadUnit: cleanEvalClasses took 29.8539ms
[debug]   Load.loadUnit(file:/C:/Users/a.szczepanik/Projekty/s99/, ...) took 21762.3643ms
[debug] Load.apply: load took 21765.1903ms
[debug] Load.apply: resolveProjects took 0.15ms
[debug] Load.apply: finalTransforms took 44.305ms
[debug] Load.apply: config.delegates took 0.4312ms
[debug] Load.apply: Def.make(settings)... took 103.2637ms
[debug] Load.apply: structureIndex took 29.8663ms
[debug] Load.apply: mkStreams took 0.0043ms
[info] set current project to s99 (in build file:/C:/Users/a.szczepanik/Projekty/s99/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 60337 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 60337, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to s99 (in build file:/C:/Users/a.szczepanik/Projekty/s99/)
[debug] > Exec(idea-shell, None, None)
